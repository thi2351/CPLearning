//
//Platform: Codeforce
//Difficulty: 1800


//First version: TLE with biggest testcase
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    unordered_map<int, queue<int>> map;
    unordered_map<int, int> set;
    vector<int> day(n);

    for (int i = 0; i < n; i++) {
        cin >> day[i];
        map[day[i]].push(i); 
    }

    int result = 0;
    for (int i = 0; i < n; i++) {
        if (set.find(day[i]) != set.end()) {
          
        } else {
            result++; 

            if (set.size() < k) {
                set[day[i]] = 1;
            } else {
            
                int maxObserve = -1;
                int maxObserveIndex = -1;
                bool foundEmpty = false;

                for (auto it = set.begin(); it != set.end(); it++) {
                    int sock = it->first;

                    if (map[sock].empty()) {
                        
                        maxObserveIndex = sock;
                        foundEmpty = true;
                        break;
                    }

                    if (map[sock].front() > maxObserve) {
                        maxObserve = map[sock].front();
                        maxObserveIndex = sock;
                    }
                }

                set.erase(maxObserveIndex);
                set[day[i]] = 1; 
            }
        }

       
        if (!map[day[i]].empty()) {
            map[day[i]].pop();
        }
    }

    cout << result << endl;
    return 0;
}
